Sprint 1
Story Point : Story Description
(1) Drop Map Pin [DONE]
    Tapping and holding the map drops a new pin. Users can place any number of pins on the map.
(3) Preserve map settings [DONE]
    The center of the map and the zoom level should be persistent.
    - create data struct to store
    - save it when app goes to background.
    - load from persistent data when app starts the first
(3) Map to photo-album [DONE]
    When a pin is tapped, the app will navigate to the Photo Album view.

End of Sprint : 29th Jan 2016 DONE on 26th Jan 2016


Sprint 2
(5) Complete iOS Persistence course [NOT DONE]
2 hours, 2 hours, 3 hours,

(1) Save and pin locations from Core Data [NOT DONE]


End of Sprint : 29th Jan 2016


Sprint 3
(3) Last Course in Core Data Course [DONE]
    - 1 hour, 0.5 hour
(3) Save and restore pin locations from Core Data[DONE]
    - 2 hours

End of Sprint : 31th Jan 2016

Sprint 4
(2) bug fix : one long press trigger multiple pin creations. [DONE]
(0.5) add segue identifier [DONE]
(3) fetch Flickr photos related to the pin location into PhotoAlbumView [DONE]
(3) persist the flickr photos for each pin
- 2hours : save image NSData to Document directory [DONE]
-        : create a model and save imagePath in sqlite.[DONE]
End of Sprint : 7th Feb 2016

Sprint 5
(3) Figure out how to associate Photo with Pin. [DONE]
(1) Prepare for Sprint 6 by going through the Rubrik again.
End of Sprint: 12th Feb 2016

Sprint 6 [NOT DONE]
[1] The code for downloading photos is in its own class, separate from the PhotoAlbumViewController.
[3] Images display as they are downloaded. They are shown with placeholders in a collection view while they download, and displayed as soon as possible.
[3] Once all images have been downloaded, the user can remove photos from the album by tapping the image in the collection view. Tapping the image removes it from the photo album, the booth in the collection view, and Core Data.
[3] When a photo is removed from an album, or when an entire album is deleted, the PhotoAlbumViewController explicitly deletes the underlying file(s) in the Documents directory.
[5] The Photo Album view has a button that initiates the download of a new album, replacing the images in the photo album with a new set from  Flickr.

Estimate work hour : 15 hours!
12th Feb : 1 hour
Saturday : 7 hours : 7am - 11am, 3pm - 6pm
Sunday   : 7 hours : 7am - 11am, 3pm - 6pm

Retrospective:
I spent the weekend polishing my LinkedIn Profile instead.
End of Sprint : 14th Feb 2016 Midnight

Sprint 7
[1] The code for downloading photos is in its own class, separate from the PhotoAlbumViewController. [DONE]
[2] Images display as they are downloaded. They are shown with placeholders in a collection view while they download, and displayed as soon as possible. [DONE]
[3] Once all images have been downloaded, the user can remove photos from the album by tapping the image in the collection view. Tapping the image removes it from the photo album, the booth in the collection view, and Core Data. [DONE]
[2] When a photo is removed from an album, or when an entire album is deleted, the PhotoAlbumViewController explicitly deletes the underlying file(s) in the Documents directory.[DONE]
[3] The Photo Album view has a button that initiates the download of a new album, replacing the images in the photo album with a new set from  Flickr.


BUG:
button reset to original title, when clicked.

21th Feb 2016 Midnight


BackLog:
(1) review rubrik
DWD8qNfjiy






Lesson 1 Reference Sheet

Here is a summary of the new code used in this lesson.

Storing a value in NSUserDefaults

NSUserDefaults.standardUserDefaults().defaults.setFloat(22.5 forKey: “myValue”)
Retrieving a value from NSUserDefaults

let value = NSUserDefaults.standardUserDefaults().floatForKey(“myValue”)
Building the path for a file in the Documents directory

let filename = "usersVoice.wav"
let dirPath = NSSearchPathForDirectoriesInDomains(.DocumentDirectory, .UserDomainMask, true)[0] as! String
let pathArray = [dirPath, filename]
let fileURL =  NSURL.fileURLWithPathComponents(pathArray)!
Checking to see if a file exists

if NSFileManager.defaultManager().fileExistsAtPath(audioFileURL().path!) {
shouldSegueToSoundPlayer = true
}